/**
 * Filter when an Authorization header is present, not empty and does not include a traditional bearer token (beginning with "ey")
 *
 * @author GangGreenTemperTatum (https://github.com/GangGreenTemperTatum)
 **/

var configNoFilter = true;
var configInScopeOnly = true; // If set to true, won't show out-of-scope items
var sessionCookieName = ""; // If given, will look for a cookie with that name.
var sessionCookieValue = ""; // If given, will check if cookie with sessionCookieName has this value.

var request = requestResponse.request();
var response = requestResponse.response();

if (response == null || !request.isInScope() || !response.isStatusCodeClass(StatusCodeClass.CLASS_2XX_SUCCESS) || !requestResponse.hasResponse()) {
    return false;
}

var authHeader = request.hasHeader("Authorization");
var authHeaderValue = authHeader ? String.valueOf(request.headerValue("Authorization")).toLowerCase() : null;

var excludeAuthorization = authHeader &&
    authHeaderValue.contains("bearer") &&
    authHeaderValue.contains("ey");

var sessionCookie = request.headerValue("Cookie") != null &&
    !sessionCookieName.isEmpty() &&
    request.hasParameter(sessionCookieName, HttpParameterType.COOKIE) &&
    (sessionCookieValue.isEmpty() || sessionCookieValue.equals(String.valueOf(request.parameter(sessionCookieName, HttpParameterType.COOKIE).value())));

var path = request.pathWithoutQuery().toLowerCase();

return (authHeader && authHeaderValue != null && authHeaderValue.length() > 0 && !excludeAuthorization || sessionCookie) && (configNoFilter) && (!configInScopeOnly || request.isInScope());
